基于最终版V4工程规范，提供完整的实现细节。

## 🎯 最终版V4完整实现

### 第一部分：统一类型定义

```typescript
// types/cecTypes.ts
export interface CecInputsV3 {
  // 基本信息
  livingArea_m2: number;
  systemVoltage: 120 | 208 | 240 | 277 | 480;
  phase: 1 | 3;
  conductorMaterial: 'Cu' | 'Al';
  terminationTempC: 60 | 75 | 90;
  ambientTempC: number;
  numConductorsInRaceway: number;
  
  // 负载信息
  heatingLoadW: number;
  coolingLoadW: number;
  isInterlocked: boolean;
  rangeLoadW: number;
  evChargerLoadW: number;
  // ... 其他电器负载
}

export interface CalculationStep {
  stepIndex: number;
  operationId: string;
  formulaRef: string;
  ruleCitations: string[];
  inputs: Record<string, any>;
  outputs: Record<string, any>;
  intermediateValues?: Record<string, any>;
  justification: string;
  tableReferences?: TableReference[];
  warnings?: string[];
  timestamp: string;
  _hash?: string; // 确定性哈希
}

export interface TableReference {
  tableId: string;
  edition: string;
  section: string;
  lookupValues: Record<string, any>;
  result: any;
}

export interface UnsignedBundleV3 {
  inputs: CecInputsV3;
  results: {
    calculatedLoad_w: number;
    serviceCurrent_a: number;
    sizingCurrent_a: number;
    conductorSize: string;
    baseAmpacity: number;
    deratedAmpacity: number;
  };
  steps: CalculationStep[];
  warnings: string[];
  metadata: {
    engine: EngineMeta;
    calculationMethod: 'cec_8_200';
    timestamp: string;
    version: string;
  };
}
```

### 第二部分：纯计算模块实现

```typescript
// core/calculators/baseLoadCalculator.ts
export function calculateBaseLoad(livingArea_m2: number): number {
  if (livingArea_m2 <= 90) {
    return 5000;
  }
  
  const additionalArea = livingArea_m2 - 90;
  const additionalUnits = Math.ceil(additionalArea / 90);
  return 5000 + additionalUnits * 1000;
}
```

```typescript
// core/calculators/heatingCoolingCalculator.ts
export function calculateHeatingCoolingLoad(
  heatingLoadW: number,
  coolingLoadW: number,
  isInterlocked: boolean
): number {
  // 供暖负载需求系数计算
  const heatingDemand = heatingLoadW <= 10000 
    ? heatingLoadW 
    : 10000 + (heatingLoadW - 10000) * 0.75;
  
  // 交互规则处理
  if (isInterlocked && heatingLoadW > 0 && coolingLoadW > 0) {
    return Math.max(heatingDemand, coolingLoadW);
  }
  
  return heatingDemand + coolingLoadW;
}
```

```typescript
// core/calculators/conductorSelector.ts
import { RuleTablesV3, TableReference } from '../../types/cecTypes';

export interface ConductorSelectionResult {
  size: string;
  baseAmpacity: number;
  deratedAmpacity: number;
  tableRefs: TableReference[];
  warnings: string[];
}

export function selectConductor(
  requiredCurrent: number,
  material: 'Cu' | 'Al',
  terminationTempC: 60 | 75 | 90,
  ambientTempC: number,
  numConductorsInRaceway: number,
  ruleTables: RuleTablesV3
): ConductorSelectionResult {
  const tableRefs: TableReference[] = [];
  const warnings: string[] = [];
  
  // 1. 确定基础载流量表格
  const baseAmpacityTable = material === 'Cu' 
    ? ruleTables.table2.copper 
    : ruleTables.table2.aluminum;
  
  // 2. 查找温度修正系数
  const tempCorrectionTable = ruleTables.table5A;
  const tempCorrectionFactor = findTemperatureCorrection(
    tempCorrectionTable, 
    ambientTempC, 
    terminationTempC
  );
  
  tableRefs.push({
    tableId: '5A',
    edition: '2024',
    section: '4-004',
    lookupValues: { ambientTempC, terminationTempC },
    result: tempCorrectionFactor
  });
  
  // 3. 查找导线束修正系数
  const bundleCorrectionTable = ruleTables.table5C;
  const bundleCorrectionFactor = findBundleCorrection(
    bundleCorrectionTable,
    numConductorsInRaceway
  );
  
  tableRefs.push({
    tableId: '5C', 
    edition: '2024',
    section: '4-004',
    lookupValues: { numConductorsInRaceway },
    result: bundleCorrectionFactor
  });
  
  // 4. 选择最小合适导线尺寸
  let selectedSize = '';
  let baseAmpacity = 0;
  let deratedAmpacity = 0;
  
  // 使用稳健的导线尺寸比较算法
  const wireSizes = Object.keys(baseAmpacityTable).sort(compareWireSizes);
  
  for (const size of wireSizes) {
    baseAmpacity = baseAmpacityTable[size];
    deratedAmpacity = baseAmpacity * tempCorrectionFactor * bundleCorrectionFactor;
    
    if (deratedAmpacity >= requiredCurrent) {
      selectedSize = size;
      break;
    }
  }
  
  if (!selectedSize) {
    selectedSize = wireSizes[wireSizes.length - 1]; // 最大可用尺寸
    warnings.push(`No conductor found for ${requiredCurrent}A. Using largest available: ${selectedSize}`);
  }
  
  tableRefs.push({
    tableId: '2',
    edition: '2024', 
    section: '4-004',
    lookupValues: { material, terminationTempC },
    result: { size: selectedSize, baseAmpacity }
  });
  
  return {
    size: selectedSize,
    baseAmpacity,
    deratedAmpacity,
    tableRefs,
    warnings
  };
}

// 稳健的导线尺寸比较函数
function compareWireSizes(a: string, b: string): number {
  const sizeOrder = ['14', '12', '10', '8', '6', '4', '3', '2', '1', 
    '1/0', '2/0', '3/0', '4/0', '250', '300', '350', '400', '500', '600'];
  
  return sizeOrder.indexOf(a) - sizeOrder.indexOf(b);
}
```

### 第三部分：表格加载器（唯一I/O来源）

```typescript
// core/tables/tableLoader.ts
import { RuleTablesV3 } from '../../types/cecTypes';

// 在构建时静态导入表格数据
import table2Data from './data/table2.json';
import table5AData from './data/table5A.json';
import table5CData from './data/table5C.json';

export function loadAllRuleTables(
  code: 'cec' | 'nec' = 'cec',
  edition: string = '2024'
): RuleTablesV3 {
  // 这里可以基于code和edition加载不同版本的表格
  // 但目前我们使用静态导入确保无运行时I/O
  
  return {
    table2: table2Data,
    table5A: table5AData,
    table5C: table5CData,
    // ... 其他表格
  };
}
```

### 第四部分：最终的审计协调器

```typescript
// services/calculateCecLoad_V4.ts
import { calculateBaseLoad } from '../core/calculators/baseLoadCalculator';
import { calculateHeatingCoolingLoad } from '../core/calculators/heatingCoolingCalculator';
import { selectConductor } from '../core/calculators/conductorSelector';
import { loadAllRuleTables } from '../core/tables/tableLoader';
import { 
  CecInputsV3, 
  UnsignedBundleV3, 
  CalculationStep,
  EngineMeta 
} from '../types/cecTypes';

export function calculateCecLoad_V4(
  inputs: CecInputsV3, 
  engineMeta: EngineMeta
): UnsignedBundleV3 {
  const steps: CalculationStep[] = [];
  let stepIndex = 1;
  const createdAt = new Date().toISOString();
  const warnings: string[] = [];
  
  // *** 关键：在协调器顶层一次性加载所有表格 ***
  const ruleTables = loadAllRuleTables('cec', '2024');

  // --- 步骤1: 基础负载计算 ---
  const baseLoadW = calculateBaseLoad(inputs.livingArea_m2);
  steps.push({
    stepIndex: stepIndex++,
    operationId: 'calc_base_load',
    formulaRef: 'CEC 8-200 1)a)i),ii)',
    ruleCitations: ['8-200 1)a)i)', '8-200 1)a)ii)'],
    inputs: { livingArea_m2: inputs.livingArea_m2 },
    outputs: { basicLoad_W: baseLoadW },
    intermediateValues: inputs.livingArea_m2 > 90 ? {
      additionalArea: inputs.livingArea_m2 - 90,
      additionalUnits: Math.ceil((inputs.livingArea_m2 - 90) / 90)
    } : undefined,
    justification: inputs.livingArea_m2 <= 90 
      ? '5000W for dwelling units up to 90m²' 
      : '5000W for first 90m² + 1000W per additional 90m² portion',
    timestamp: createdAt,
  });

  let totalLoadW = baseLoadW;

  // --- 步骤2: 供暖空调负载计算 ---
  const hvacW = calculateHeatingCoolingLoad(
    inputs.heatingLoadW,
    inputs.coolingLoadW, 
    inputs.isInterlocked
  );
  
  const heatingDemand = inputs.heatingLoadW <= 10000 
    ? inputs.heatingLoadW 
    : 10000 + (inputs.heatingLoadW - 10000) * 0.75;
  
  steps.push({
    stepIndex: stepIndex++,
    operationId: 'calc_heating_ac_load',
    formulaRef: 'CEC 8-200 1)a)iii), 62-118 3), 8-106 3)',
    ruleCitations: ['8-200 1)a)iii)', '62-118 3)', '8-106 3)'],
    inputs: { 
      heatingLoadW: inputs.heatingLoadW, 
      coolingLoadW: inputs.coolingLoadW, 
      isInterlocked: inputs.isInterlocked 
    },
    outputs: { heatingAcLoad_W: hvacW },
    intermediateValues: {
      heatingDemandFactor: inputs.heatingLoadW > 10000 ? '100% of first 10kW + 75% of excess' : '100%',
      calculatedHeatingDemand: heatingDemand,
      interlockEffect: inputs.isInterlocked ? 'Using greater of heating or cooling' : 'Sum of heating and cooling'
    },
    justification: 'Heating load with demand factor per CEC 62-118, AC load at 100%, interlock rule per CEC 8-106',
    timestamp: createdAt,
  });
  
  totalLoadW += hvacW;

  // --- 步骤3: 其他负载计算 (范围、EV等) ---
  // [这里添加其他纯计算模块的调用和审计步骤记录]
  
  // --- 步骤4: 服务电流计算 ---
  const serviceCurrentA = totalLoadW / inputs.systemVoltage;
  steps.push({
    stepIndex: stepIndex++,
    operationId: 'calc_service_current',
    formulaRef: 'I = P / V',
    ruleCitations: [],
    inputs: { totalLoad_W: totalLoadW, systemVoltage_V: inputs.systemVoltage },
    outputs: { serviceCurrent_A: serviceCurrentA },
    justification: `Service current = Total load ${totalLoadW}W / System voltage ${inputs.systemVoltage}V`,
    timestamp: createdAt,
  });

  // --- 步骤5: 导线选择 ---
  const sizingCurrentA = serviceCurrentA * 1.25; // 125% 连续负载系数
  
  const conductorResult = selectConductor(
    sizingCurrentA,
    inputs.conductorMaterial,
    inputs.terminationTempC,
    inputs.ambientTempC,
    inputs.numConductorsInRaceway,
    ruleTables
  );
  
  steps.push({
    stepIndex: stepIndex++,
    operationId: 'select_conductor',
    formulaRef: 'CEC Table 2, 5A, 5C - 4-004',
    ruleCitations: ['4-004', 'Table 2', 'Table 5A', 'Table 5C'],
    inputs: { 
      sizingCurrent_A: sizingCurrentA,
      material: inputs.conductorMaterial,
      terminationTempC: inputs.terminationTempC,
      ambientTempC: inputs.ambientTempC,
      numConductorsInRaceway: inputs.numConductorsInRaceway
    },
    outputs: { 
      conductorSize: conductorResult.size,
      baseAmpacity: conductorResult.baseAmpacity,
      deratedAmpacity: conductorResult.deratedAmpacity
    },
    intermediateValues: {
      requiredCurrent: sizingCurrentA,
      temperatureFactor: conductorResult.deratedAmpacity / conductorResult.baseAmpacity,
      bundleFactor: 1.0 // 从tableRefs中可以推导
    },
    justification: 'Smallest conductor where Derated Ampacity (Base × Temp Factor × Bundle Factor) ≥ Sizing Current',
    timestamp: createdAt,
    tableReferences: conductorResult.tableRefs,
    warnings: conductorResult.warnings
  });
  
  warnings.push(...conductorResult.warnings);

  // --- 组装最终结果包 ---
  const finalBundle: UnsignedBundleV3 = {
    inputs,
    results: {
      calculatedLoad_w: totalLoadW,
      serviceCurrent_a: serviceCurrentA,
      sizingCurrent_a: sizingCurrentA,
      conductorSize: conductorResult.size,
      baseAmpacity: conductorResult.baseAmpacity,
      deratedAmpacity: conductorResult.deratedAmpacity
    },
    steps,
    warnings,
    metadata: {
      engine: engineMeta,
      calculationMethod: 'cec_8_200',
      timestamp: createdAt,
      version: '4.0.0'
    }
  };

  return finalBundle;
}
```

### 第五部分：测试策略

```typescript
// tests/unit/calculators/baseLoadCalculator.spec.ts
import { calculateBaseLoad } from '../../../core/calculators/baseLoadCalculator';

describe('BaseLoadCalculator', () => {
  it('should return 5000W for exactly 90m²', () => {
    expect(calculateBaseLoad(90)).toBe(5000);
  });

  it('should return 6000W for 180m²', () => {
    expect(calculateBaseLoad(180)).toBe(6000);
  });

  it('should handle fractional areas correctly', () => {
    expect(calculateBaseLoad(91)).toBe(6000); // 向上取整
    expect(calculateBaseLoad(179)).toBe(6000); // 仍然是一个额外单位
  });
});

// tests/integration/cecCalculation.spec.ts
import { calculateCecLoad_V4 } from '../../../services/calculateCecLoad_V4';

describe('CEC 8-200 Full Calculation', () => {
  const standardInputs: CecInputsV3 = {
    livingArea_m2: 120,
    systemVoltage: 240,
    phase: 1,
    conductorMaterial: 'Cu',
    terminationTempC: 75,
    ambientTempC: 30,
    numConductorsInRaceway: 3,
    heatingLoadW: 8000,
    coolingLoadW: 5000,
    isInterlocked: true,
    rangeLoadW: 8000,
    evChargerLoadW: 0
  };

  it('should produce correct total load', () => {
    const result = calculateCecLoad_V4(standardInputs, testEngineMeta);
    
    expect(result.results.calculatedLoad_w).toBe(19000); // 根据具体计算验证
    expect(result.steps).toHaveLength(5); // 根据实际步骤数调整
  });

  it('should include complete audit trail', () => {
    const result = calculateCecLoad_V4(standardInputs, testEngineMeta);
    
    // 验证审计步骤的完整性
    expect(result.steps[0].operationId).toBe('calc_base_load');
    expect(result.steps[0].tableReferences).toBeUndefined(); // 基础负载没有表格引用
    expect(result.steps[4].tableReferences).toBeDefined(); // 导线选择有表格引用
    expect(result.steps[4].tableReferences!.length).toBeGreaterThan(0);
  });
});
```