version: '3.8'

services:
  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: tradespro_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-tradespro}
      POSTGRES_USER: ${DB_USER:-tradespro_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tradespro_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tradespro_network
    restart: unless-stopped

  # ============================================
  # Redis Cache
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: tradespro_redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - tradespro_network
    restart: unless-stopped

  # ============================================
  # Node.js Calculation Microservice
  # ============================================
  calc-service:
    build:
      context: ./services/calculation-service
      dockerfile: Dockerfile
      args:
        NODE_VERSION: 18-alpine
        GIT_COMMIT: ${GIT_COMMIT:-dev}
        BUILD_TIMESTAMP: ${BUILD_TIMESTAMP:-}
    container_name: tradespro_calc_service
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      CALC_SERVICE_PORT: 3001
      GIT_COMMIT: ${GIT_COMMIT:-dev}
      BUILD_TIMESTAMP: ${BUILD_TIMESTAMP:-}
      # Table version configuration
      DEFAULT_CODE_EDITION: ${DEFAULT_CODE_EDITION:-2024}
      DEFAULT_CODE_TYPE: ${DEFAULT_CODE_TYPE:-cec}
    ports:
      - "${CALC_SERVICE_PORT:-3001}:3001"
    volumes:
      # Mount tables as read-only
      - ./services/calculation-service/data/tables:/app/data/tables:ro
      # Mount source for development (comment out in production)
      - ./services/calculation-service/src:/app/src:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - tradespro_network
    restart: unless-stopped

  # ============================================
  # FastAPI Main Backend
  # ============================================
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tradespro_api
    environment:
      # Database
      DATABASE_URL: postgresql://${DB_USER:-tradespro_user}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-tradespro}
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # Services
      CALCULATION_SERVICE_URL: http://calc-service:3001
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-change-this-in-production}
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:9000,http://localhost:8080}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./backend/app:/app/app:ro
      - upload_data:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      calc-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - tradespro_network
    restart: unless-stopped

  # ============================================
  # Nginx Reverse Proxy (Optional)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: tradespro_nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - api
      - calc-service
    networks:
      - tradespro_network
    restart: unless-stopped
    profiles:
      - production

# ============================================
# Volumes
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  upload_data:
    driver: local

# ============================================
# Networks
# ============================================
networks:
  tradespro_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16